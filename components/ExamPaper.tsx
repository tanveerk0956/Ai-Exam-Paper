
import React from 'react';
import { ExamSettings } from '../types';

interface ExamPaperProps {
  htmlContent: string;
  settings: ExamSettings;
}

const ExamPaper: React.FC<ExamPaperProps> = ({ htmlContent, settings }) => {
  // Convert Markdown-like headings and lists to HTML
  const formatMarkdownToHtml = (markdown: string): string => {
    let html = markdown;

    // Convert **bold** to <strong>bold</strong>
    html = html.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');

    // Convert ## Heading to <h2>Heading</h2>
    html = html.replace(/^##\s*(.*)$/gm, '<h2 class="text-xl font-bold mt-6 mb-4">$1</h2>');

    // Convert numbered lists to <ol><li>...</li></ol>
    // This is a simplified conversion, assuming single-level lists
    const convertNumberedLists = (text: string): string => {
      const lines = text.split('\n');
      let inList = false;
      let result: string[] = [];
      let currentList: string[] = [];

      lines.forEach(line => {
        const trimmedLine = line.trim();
        if (trimmedLine.match(/^\d+\.\s/)) { // Starts with "1. ", "2. " etc.
          if (!inList) {
            inList = true;
            result.push('<ol class="list-decimal pl-6 mt-2 mb-4 space-y-2">');
          }
          currentList.push(`<li>${trimmedLine.substring(trimmedLine.indexOf('.') + 1).trim()}</li>`);
        } else {
          if (inList) {
            result.push(currentList.join('\n'));
            result.push('</ol>');
            currentList = [];
            inList = false;
          }
          result.push(line); // Push non-list lines directly
        }
      });

      if (inList) { // Close any open list at the end
        result.push(currentList.join('\n'));
        result.push('</ol>');
      }
      return result.join('\n');
    };

    html = convertNumberedLists(html);

    // Replace multiple newlines with single ones for paragraph breaking
    html = html.replace(/\n\s*\n/g, '<p class="mt-4 mb-2"></p>');
    html = html.replace(/\n/g, '<br/>'); // Convert remaining newlines to <br/>

    return html;
  };

  const formattedHtml = formatMarkdownToHtml(htmlContent);

  // Helper function to render a detail row
  const DetailRow: React.FC<{ label: string; value: string | number }> = ({ label, value }) => (
    <div className="flex justify-between items-center text-sm mb-1">
      <span className="font-semibold">{label}:</span>
      <span>{value}</span>
    </div>
  );

  return (
    <div className="exam-paper-container bg-white shadow-lg p-8 md:p-12 print:p-0">
      {/* Header */}
      <div className="border-b-2 border-gray-300 pb-4 mb-6 text-center">
        <h1 className="text-2xl font-extrabold text-gray-800 mb-2">Smart Exam Creator</h1>
        <DetailRow label="Topic" value={settings.topic} />
        <DetailRow label="Class" value={settings.className} />
        <DetailRow label="Board" value={settings.board} />
        <DetailRow label="Student" value={settings.studentName || '____________________'} />
        <DetailRow label="Total Marks" value={settings.totalMarks} />
        <DetailRow label="Duration" value={`${settings.duration} minutes`} />
      </div>

      {/* Main Content - Questions */}
      <div className="text-gray-900 leading-relaxed" dangerouslySetInnerHTML={{ __html: formattedHtml }}>
      </div>

      {/* Footer */}
      <div className="border-t-2 border-gray-300 pt-4 mt-8 text-center text-gray-600 text-xs">
        Generated by SmartExam AI
      </div>
    </div>
  );
};

export default ExamPaper;
    